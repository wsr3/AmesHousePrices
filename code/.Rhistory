knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(plyr)
library(dplyr)
library(mice) # for imputation
library(zoo) # for time series
library(caret)
library(parallel)
library(doParallel)
cluster = makeCluster(detectCores() - 1)
registerDoParallel(cluster)
load(file="../result/xgTune.rda")
xgbstTune
xgbstTune$results
xgbstTune$bestTune
plot(xgbstTune)
names(train[, c(2:52, 54)])
names(train[, c(2:52, 54)])
train = read.csv("../data/trainSelected.csv")
names(train[, c(2:52, 54)])
test = read.csv("../data/cleanedTest.csv")
x.test = test[, names(train[, c(2:52, 54)])]
fac2dum<-function(dfr, betweenColAndLevel="") {
nc<-dim(dfr)[2]
firstRow<-dfr[1,]
coln<-colnames(dfr)
retval<-do.call(cbind, lapply(seq(nc), function(ci){
if(is.factor(firstRow[,ci]))
{
lvls<-levels(firstRow[,ci])[-1]
stretchedcols<-sapply(lvls, function(lvl){
rv<-dfr[,ci]==lvl
mode(rv)<-"integer"
return(rv)
})
if(!is.matrix(stretchedcols))
stretchedcols<-matrix(stretchedcols, nrow=1)
colnames(stretchedcols)<-paste(coln[ci],
lvls, sep=betweenColAndLevel)
return(stretchedcols)
}
else
{
curcol<-matrix(dfr[,ci], ncol=1)
colnames(curcol)<-coln[ci]
return(curcol)
}
}))
rownames(retval)<-rownames(dfr)
return(retval)
}
x.test = fac2dum(x.test)
